"use client";

import { Button } from "@/components/ui/button";
import {
  Dialog,
  DialogClose,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { ChakamFileUploader } from "./chakam-file-uploader";
import { useState, useEffect } from "react";
import { z } from "zod";
import { X, CheckCircle } from "lucide-react";
import { Separator } from "./ui/separator";

// Image Preview component with proper cleanup
function ImagePreview({ file }: { file: File }) {
  const [previewUrl, setPreviewUrl] = useState<string>("");

  useEffect(() => {
    // Create the preview URL
    const objectUrl = URL.createObjectURL(file);
    setPreviewUrl(objectUrl);

    // Clean up the URL when component unmounts or file changes
    return () => {
      URL.revokeObjectURL(objectUrl);
    };
  }, [file]);

  return (
    <div className="relative w-full h-48 bg-muted/30 rounded-md overflow-hidden">
      <img
        src={previewUrl}
        alt="Preview"
        className="w-full h-full object-contain"
      />
    </div>
  );
}

// Success screen component
function SuccessScreen({ onClose }: { onClose: () => void }) {
  return (
    <div className="py-8 flex flex-col items-center justify-center space-y-6">
      <div className="h-16 w-16 rounded-full bg-purple-500 flex items-center justify-center">
        <CheckCircle className="h-8 w-8 text-white" />
      </div>
      <h2 className="text-xl font-bold text-center">Upload Successful!</h2>
      <Button 
        onClick={onClose} 
        className="w-full bg-purple-500 hover:bg-purple-600 text-white"
      >
        Check it out!
      </Button>
    </div>
  );
}

const twitterUrlSchema = z
  .string()
  .trim()
  .refine(
    (val) => {
      if (!val) return true; // Empty is valid (but will be handled separately)
      const twitterUrlRegex =
        /^https?:\/\/(?:www\.)?twitter\.com\/(?:#!\/)?\w+\/status\/\d+/;
      return twitterUrlRegex.test(val);
    },
    { message: "Please enter a valid Twitter post URL" }
  );

export function FileUploaderDialog({
  children,
}: {
  children: React.ReactNode;
}) {
  const [twitterUrl, setTwitterUrl] = useState("");
  const [urlError, setUrlError] = useState("");
  const [files, setFiles] = useState<File[]>([]);
  const [isSubmitDisabled, setIsSubmitDisabled] = useState(true);
  const [showSuccess, setShowSuccess] = useState(false);
  const [open, setOpen] = useState(false);

  // Handle Twitter URL validation
  const handleTwitterUrlChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const value = e.target.value;
    setTwitterUrl(value);

    try {
      twitterUrlSchema.parse(value);
      setUrlError("");
    } catch (error) {
      if (error instanceof z.ZodError) {
        setUrlError(error.errors[0].message);
      }
    }

    // If URL is entered, clear files
    if (value) {
      setFiles([]);
    }
  };

  // Handle file changes from ChakamFileUploader
  const handleFilesChange = (newFiles: File[]) => {
    setFiles(newFiles);

    // If files are uploaded, clear Twitter URL
    if (newFiles.length > 0) {
      setTwitterUrl("");
      setUrlError("");
    }
  };

  // Determine if submit button should be enabled
  useEffect(() => {
    const hasValidUrl = twitterUrl && !urlError;
    const hasFiles = files.length > 0;

    setIsSubmitDisabled(!(hasValidUrl || hasFiles));
  }, [twitterUrl, urlError, files]);

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    console.log("Submitting with:", { twitterUrl, files });
    // Show success screen
    setShowSuccess(true);
  };
  
  const handleClose = () => {
    setOpen(false);
    // Reset form after dialog is fully closed
    setTimeout(() => {
      setShowSuccess(false);
      setFiles([]);
      setTwitterUrl("");
      setUrlError("");
    }, 300);
  };
  
  const handleSuccessDone = () => {
    setOpen(false);
  };

  return (
    <Dialog open={open} onOpenChange={setOpen}>
      <DialogTrigger asChild>{children}</DialogTrigger>
      <DialogContent className="sm:max-w-[550px] md:max-w-[650px] lg:max-w-[750px]">
        {!showSuccess ? (
          <>
            <DialogHeader className="border-b pb-3">
              <DialogTitle className="text-left">Upload Screenshot</DialogTitle>
              <DialogDescription className="text-center text-xs text-blue-500 font-medium"></DialogDescription>
            </DialogHeader>
            <p className="text-left text-xs text-muted-foreground font-semibold">
              You can only choose one option <span className="text-red-500">*</span>
            </p>
            <form onSubmit={handleSubmit}>
              <div className="space-y-6 py-4">
                {/* Desktop/Tablet Layout - Side by side */}
                <div className="hidden sm:flex sm:gap-6">
                  <div className="flex-1">
                    {files.length === 0 ? (
                      <div className="space-y-2">
                        <ChakamFileUploader
                          onFilesChange={handleFilesChange}
                          disabled={!!twitterUrl}
                        />
                        <div className="text-xs text-muted-foreground flex justify-between px-1">
                          <span>Supported files: .jpg, .png, .gif</span>
                          <span>Max file size: 10mb</span>
                        </div>
                      </div>
                    ) : (
                      <div className="border rounded-md p-3 h-full">
                        <div className="flex justify-between items-center mb-2">
                          <span className="text-sm font-medium">Uploaded file</span>
                          <Button
                            variant="ghost"
                            size="icon"
                            className="h-6 w-6"
                            onClick={() => setFiles([])}
                            type="button"
                          >
                            <X className="h-4 w-4" />
                          </Button>
                        </div>
                        <div className="space-y-2">
                          <div className="text-sm text-muted-foreground">
                            {files[0]?.name}
                          </div>
                          {files[0] && <ImagePreview file={files[0]} />}
                        </div>
                      </div>
                    )}
                  </div>
                  
                  <div className="flex-1 flex flex-col">
                    <div className="space-y-2 flex-grow">
                      <Label htmlFor="twitter-url-desktop" className="text-sm font-medium">
                        Or upload from a Tweet link
                      </Label>
                      <Input
                        id="twitter-url-desktop"
                        placeholder="Paste link here"
                        value={twitterUrl}
                        onChange={handleTwitterUrlChange}
                        disabled={files.length > 0}
                        className={`bg-muted/50 ${urlError ? "border-red-500" : ""}`}
                      />
                      {urlError && <p className="text-xs text-red-500">{urlError}</p>}
                    </div>
                    
                    <div className="mt-auto pt-4">
                      <Button
                        type="submit"
                        disabled={isSubmitDisabled}
                        variant={isSubmitDisabled ? "secondary" : "default"}
                        className="w-full"
                      >
                        Continue
                      </Button>
                    </div>
                  </div>
                </div>
                
                {/* Mobile Layout - Stacked */}
                <div className="sm:hidden space-y-4">
                  {files.length === 0 && (
                    <div className="space-y-2">
                      <ChakamFileUploader
                        onFilesChange={handleFilesChange}
                        disabled={!!twitterUrl}
                      />
                      <div className="text-xs text-muted-foreground flex justify-between px-1">
                        <span>Supported files: .jpg, .png, .gif</span>
                        <span>Max file size: 10mb</span>
                      </div>
                    </div>
                  )}

                  {files.length > 0 && (
                    <div className="border rounded-md p-3">
                      <div className="flex justify-between items-center mb-2">
                        <span className="text-sm font-medium">Uploaded file</span>
                        <Button
                          variant="ghost"
                          size="icon"
                          className="h-6 w-6"
                          onClick={() => setFiles([])}
                          type="button"
                        >
                          <X className="h-4 w-4" />
                        </Button>
                      </div>
                      <div className="space-y-2">
                        <div className="text-sm text-muted-foreground">
                          {files[0]?.name}
                        </div>
                        {files[0] && <ImagePreview file={files[0]} />}
                      </div>
                    </div>
                  )}

                  <div className="space-y-2">
                    <Label htmlFor="twitter-url-mobile" className="text-sm font-medium">
                      Or upload from a Tweet link
                    </Label>
                    <Input
                      id="twitter-url-mobile"
                      placeholder="Paste link here"
                      value={twitterUrl}
                      onChange={handleTwitterUrlChange}
                      disabled={files.length > 0}
                      className={`bg-muted/50 ${urlError ? "border-red-500" : ""}`}
                    />
                    {urlError && <p className="text-xs text-red-500">{urlError}</p>}
                  </div>

                  <Button
                    type="submit"
                    disabled={isSubmitDisabled}
                    variant={isSubmitDisabled ? "secondary" : "default"}
                    className="w-full"
                  >
                    Continue
                  </Button>
                </div>
              </div>
            </form>
          </>
        ) : (
          <SuccessScreen onClose={handleSuccessDone} />
        )}
      </DialogContent>
    </Dialog>
  );
}
